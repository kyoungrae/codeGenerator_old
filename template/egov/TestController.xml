<?xml version="1.0" encoding="UTF-8"?>
<template>
	<reserved>
		<sourcetype>Controller</sourcetype>
		<conjunction>,</conjunction>
		<filename>#Service##Sourcetype#Test</filename>
		<ext>java</ext>
		<path>./work/genSrc/test/kr/co/dreamlabs/#namespace#/#scope#/controller/</path>
	</reserved>
	<definition>
		<version>1.0</version>
		<author>source generator (ilho.ko@gmail.com)</author>
		<cdate>2015.7.28</cdate>
		<pakage>test.kr.co.dreamlabs.#namespace#.#scope#.controller</pakage>
	</definition>
	<source>
	<![CDATA[
/**
 * + dreamlabs Web application Framework
 */
package #pakage#;

//import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
//import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

//import kr.co.dreamlabs.#namespace#.#scope#.bean.#Service#Bean;
import kr.co.dreamlabs.#namespace#.#scope#.controller.#Service#Controller;
import kr.co.dreamlabs.std.web.mvc.view.Result;
import kr.co.dreamlabs.std.web.mvc.view.data.json.RecordData;
import kr.co.dreamlabs.std.web.mvc.view.name.Response;
import kr.co.dreamlabs.std.web.mvc.view.name.ViewName;
import test.kr.co.dreamlabs.TestConfig;

@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class #Service##Sourcetype#Test extends TestConfig {
	@Inject
	private #Service#Controller #service#controller;
	
//	@Inject 
//	private WebApplicationContext context;
	
	private MockMvc mockMvc;
	private ObjectMapper mapper; 
	private Map<String, Object> sessionMap;#begin#
	private Object #key_fields#;#end#	
	
	@Before
	public void before() {
		mapper = new ObjectMapper();
		sessionMap = new HashMap<String, Object>();
		sessionMap.put("UserLogin.user", "admin");
		sessionMap.put("UserLogin.password", "administrator");
		mockMvc = MockMvcBuilders.standaloneSetup(#service#controller).build();
		//mockMvc = MockMvcBuilders.webAppContextSetup(this.context).build();#begin#	
		#key_fields# = "#key_fields#";#end#
	}
	
	@Test
	public void testAll() throws Exception {
		testAdd#Service#();
		testModify#Service#();
		testSearch#Service#();
		testDrop#Service#();
	}
	
	public void testAdd#Service#() throws Exception {
	    MultiValueMap<String, String> args = new LinkedMultiValueMap<>();
	    args.add("datatype", "json");#begin#	
		args.add("#key_fields#", String.valueOf(#key_fields#));#end#	 
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/#namespace#/#scope#/#service#.dpg?command=add#service#")
				.contentType(MediaType.APPLICATION_FORM_URLENCODED)
				.sessionAttrs(sessionMap)
				.params(args);

		MvcResult result = mockMvc.perform(requestBuilder)
		.andExpect(status().isOk())
		.andExpect(view().name(ViewName.XML))
		.andExpect(model().attributeExists(Response.XML.Header.Code))
		.andExpect(model().attribute(Response.XML.Header.Code, Result.Code.SUCCESS.getCode()))
		.andExpect(model().attribute(Response.XML.Header.DataType, ViewName.JSON))
		.andExpect(model().attributeExists(Response.XML.Body.Data))
		.andDo(print())
		.andReturn()
        ;
	}
	
	public void testModify#Service#() throws Exception {
	    MultiValueMap<String, String> args = new LinkedMultiValueMap<>();
	    args.add("datatype", "json");#begin#	
		args.add("#key_fields#", String.valueOf(#key_fields#));#end#
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/#namespace#/#scope#/#service#.dpg?command=modify#service#")
				.contentType(MediaType.APPLICATION_FORM_URLENCODED)
				.sessionAttrs(sessionMap)
				.params(args);

		MvcResult result = mockMvc.perform(requestBuilder)
		.andExpect(status().isOk())
		.andExpect(view().name(ViewName.XML))
		.andExpect(model().attributeExists(Response.XML.Header.Code))
		.andExpect(model().attribute(Response.XML.Header.Code, Result.Code.SUCCESS.getCode()))
		.andExpect(model().attribute(Response.XML.Header.DataType, ViewName.JSON))
		.andExpect(model().attributeExists(Response.XML.Body.Data))
		.andDo(print())
		.andReturn()
        ;
	}
	
	public void testSearch#Service#() throws Exception {
	    MultiValueMap<String, String> args = new LinkedMultiValueMap<>();
	    args.add("datatype", "json");#begin#	
		args.add("#key_fields#", String.valueOf(#key_fields#));#end#
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/#namespace#/#scope#/#service#.dpg?command=search#service#")
				.contentType(MediaType.APPLICATION_FORM_URLENCODED)
				.sessionAttrs(sessionMap)
				.params(args);

		MvcResult result = mockMvc.perform(requestBuilder)
		.andExpect(status().isOk())	// HTTP STATUS 200
		.andExpect(view().name(ViewName.XML))
		.andExpect(model().attributeExists(Response.XML.Header.Code))
		.andExpect(model().attribute(Response.XML.Header.Code, Result.Code.SUCCESS.getCode()))
		.andExpect(model().attribute(Response.XML.Header.DataType, ViewName.JSON))
		.andExpect(model().attributeExists(Response.XML.Body.Data))
		.andDo(print())
		.andReturn()
        ;
		
		JsonNode jsonNode = mapper.readValue( ((RecordData)result.getModelAndView().getModel().get(Response.XML.Body.Data)).toString(), JsonNode.class);#begin#	
		Assert.assertEquals(#key_fields#, jsonNode.at("/data/0/#key_fields#").asText());#end#
	}
		
	
	public void testDrop#Service#() throws Exception {
	    MultiValueMap<String, String> args = new LinkedMultiValueMap<>();
	    args.add("datatype", "json");#begin#	
		args.add("#key_fields#", String.valueOf(#key_fields#));#end#
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/#namespace#/#scope#/#service#.dpg?command=drop#service#")
				.contentType(MediaType.APPLICATION_FORM_URLENCODED)
				.sessionAttrs(sessionMap)
				.params(args);

		MvcResult result = mockMvc.perform(requestBuilder)
		.andExpect(status().isOk())
		.andExpect(view().name(ViewName.XML))
		.andExpect(model().attributeExists(Response.XML.Header.Code))
		.andExpect(model().attribute(Response.XML.Header.Code, Result.Code.SUCCESS.getCode()))
		.andExpect(model().attribute(Response.XML.Header.DataType, ViewName.JSON))
		.andExpect(model().attributeExists(Response.XML.Body.Data))
		.andDo(print())
		.andReturn()
        ;
	}
}
	]]>
	</source>
</template>
